\boolfalse {citerequest}\boolfalse {citetracker}\boolfalse {pagetracker}\boolfalse {backtracker}\relax 
\defcounter {refsection}{0}\relax 
\select@language {english}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {1.1}{\ignorespaces Example.\relax }}{1}{figure.caption.7}
\contentsline {figure}{\numberline {1.2}{\ignorespaces Optimized versions.\relax }}{2}{figure.caption.19}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {2.1}{\ignorespaces Variable elimination example.\relax }}{10}{figure.caption.52}
\contentsline {figure}{\numberline {2.2}{\ignorespaces Using a buffer to pass live values in an OSR transition.\relax }}{11}{figure.caption.70}
\contentsline {figure}{\numberline {2.3}{\ignorespaces Live values as arguments in an OSR transition.\relax }}{12}{figure.caption.103}
\contentsline {figure}{\numberline {2.4}{\ignorespaces Instrumented function with multiple entry points.\relax }}{13}{figure.caption.128}
\contentsline {figure}{\numberline {2.5}{\ignorespaces OSR exit options}}{15}{figure.caption.163}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {3.1}{\ignorespaces physical vs. source-level stacks}}{20}{figure.caption.172}
\contentsline {figure}{\numberline {3.2}{\ignorespaces Recovering the source-level state}}{21}{figure.caption.173}
\contentsline {figure}{\numberline {3.3}{\ignorespaces The WebKit FTL}}{25}{figure.caption.186}
\contentsline {figure}{\numberline {3.4}{\ignorespaces SSA example}}{27}{figure.caption.189}
\contentsline {figure}{\numberline {3.5}{\ignorespaces OSR classification}}{28}{figure.caption.197}
\contentsline {figure}{\numberline {3.6}{\ignorespaces Retrofitting an existing JIT with OSR support}}{29}{figure.caption.198}
\contentsline {figure}{\numberline {3.7}{\ignorespaces A CFG of a loop with no OSR point}}{30}{figure.caption.203}
\contentsline {figure}{\numberline {3.8}{\ignorespaces The CFG of the loop in Figure \ref {BaseCFG}, after inserting an OSR point}}{30}{figure.caption.204}
\contentsline {figure}{\numberline {3.9}{\ignorespaces The transformed CFG of the loop in Figure \ref {InsertCFG} after the OSR Pass}}{31}{figure.caption.205}
\contentsline {figure}{\numberline {3.10}{\ignorespaces A CFG of a running function before inserting the blocks for state recovery}}{31}{figure.caption.206}
\contentsline {figure}{\numberline {3.11}{\ignorespaces The CFG of the loop represented in Figure \ref {FCFG} after inserting the state recovery blocks, form\cite {lameed2013modular}.}}{32}{figure.caption.207}
\contentsline {figure}{\numberline {3.12}{\ignorespaces The DestFunGenerator type.\relax }}{34}{figure.caption.218}
\contentsline {figure}{\numberline {3.13}{\ignorespaces The insertOpenOSR prototype.\relax }}{35}{figure.caption.232}
\contentsline {figure}{\numberline {3.14}{\ignorespaces Resolved OSR Scenario}}{35}{figure.caption.259}
\contentsline {figure}{\numberline {3.15}{\ignorespaces The insertResolvedOSR prototype.\relax }}{36}{figure.caption.260}
\contentsline {figure}{\numberline {3.16}{\ignorespaces Simplified original LLVM IR.\relax }}{36}{figure.caption.281}
\contentsline {figure}{\numberline {3.17}{\ignorespaces Simplified instrumented LLVM IR.\relax }}{37}{figure.caption.294}
\contentsline {figure}{\numberline {3.18}{\ignorespaces Simplified continuation function LLVM IR.\relax }}{37}{figure.caption.313}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {4.1}{\ignorespaces RJIT compilation flow.\relax }}{44}{figure.caption.340}
\contentsline {figure}{\numberline {4.2}{\ignorespaces Example of LLVM IR for basic R code.\relax }}{44}{figure.caption.342}
\contentsline {figure}{\numberline {4.3}{\ignorespaces R simple function.\relax }}{45}{figure.caption.368}
\contentsline {figure}{\numberline {4.4}{\ignorespaces Non-instrumented RJIT LLVM IR.\relax }}{46}{figure.caption.371}
\contentsline {figure}{\numberline {4.5}{\ignorespaces Instrumented RJIT LLVM IR.\relax }}{47}{figure.caption.380}
\contentsline {figure}{\numberline {4.6}{\ignorespaces The getFreshIR prototype.\relax }}{50}{figure.caption.400}
\contentsline {figure}{\numberline {4.7}{\ignorespaces The base version map.\relax }}{51}{figure.caption.412}
\contentsline {figure}{\numberline {4.8}{\ignorespaces Utility functions.\relax }}{52}{figure.caption.416}
\contentsline {figure}{\numberline {4.9}{\ignorespaces The statemaps.\relax }}{53}{figure.caption.448}
\contentsline {figure}{\numberline {4.10}{\ignorespaces The insertOSRExit prototype.\relax }}{54}{figure.caption.452}
\contentsline {figure}{\numberline {4.11}{\ignorespaces Use case for unguarded OSR points.\relax }}{57}{figure.caption.477}
\addvspace {10\p@ }
\contentsline {figure}{\numberline {5.1}{\ignorespaces Example of RJIT LLVM IR for a function call.\relax }}{63}{figure.caption.498}
\contentsline {figure}{\numberline {5.2}{\ignorespaces A simple R code.\relax }}{66}{figure.caption.526}
\contentsline {figure}{\numberline {5.3}{\ignorespaces The original LLVM IR for function g in Figure \ref {fig:simplercode}.\relax }}{66}{figure.caption.534}
\contentsline {figure}{\numberline {5.4}{\ignorespaces The LLVM IR for function f in Figure \ref {fig:simplercode}.\relax }}{66}{figure.caption.548}
\contentsline {figure}{\numberline {5.5}{\ignorespaces The LLVM IR of g after executing the OSR inliner.\relax }}{67}{figure.caption.557}
\contentsline {figure}{\numberline {5.6}{\ignorespaces The continuation function corresponding to the LLVM IR in Figure \ref {fig:inlinedouter}.\relax }}{68}{figure.caption.589}
\contentsline {figure}{\numberline {5.7}{\ignorespaces The micro-benchmark.\relax }}{73}{figure.caption.616}
\contentsline {figure}{\numberline {5.8}{\ignorespaces OSR Handler versus RJIT: histogram of the time required to obtain a fresh and correct IR for all the functions in the Shootout benchmark.\relax }}{75}{figure.caption.637}
\addvspace {10\p@ }
\addvspace {10\p@ }
